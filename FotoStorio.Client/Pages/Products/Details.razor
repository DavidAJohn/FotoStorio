@page "/products/details/{id:int}"

@using FotoStorio.Shared.DTOs
@using FotoStorio.Client.Contracts

@inject IProductService productService

<div class="container">
    @if (errorMessage != "")
    {
        <div class="alert alert-danger" role="alert">
            <h4>@errorMessage</h4>
        </div>
    }
    else if (product == null)
    {
        <text>Loading product details...</text>
    }
    else
    {
        <button class="p-2 my-3 bg-fotofuchsia text-white rounded-sm text-sm hover:opacity-70">
            <a href="/products" class="hover:text-white">Go Back</a>
        </button>

        <div class="mt-4 grid sm:grid-cols-1 lg:grid-cols-2 gap-10">
            <div class="w-full mx-4">
                <img src="@product.ImageUrl" />
            </div>
            <div>
                <div class="text-2xl font-bold mb-4">@product.Name</div>
                @if (product.SalePrice != 0 && product.SalePrice < product.Price)
                    {   
                        <div class="mb-4">
                            <span class="text-gray-500 text-md line-through mr-4">£@product.Price</span>
                            <span class="inline text-gray-500 text-md">Now: £@product.SalePrice</span>
                        </div>
                    }
                    else
                    {
                        <div class="mb-4">
                            <span class="block text-gray-500 text-md">£@product.Price</span>
                        </div>
                    }
                <div class="font-bold text-md text-green-700 mb-4">In Stock</div>
                <div class="font-bold text-md mb-4 flex flex-row justify-items-start items-center h-2 w-2">
                    <div class="font-bold text-md mr-3">Quantity:</div>
                    <button type="button" class="border-1 border-solid border-gray-300 rounded px-2 py-0 text-lg font-bold">-</button>
                    <span class="font-bold mx-2">1</span>
                    <button type="button" class="border-1 border-solid border-gray-300 rounded px-2 py-0 text-lg font-bold">+</button>
                </div>
                <div class="flex flex-row justify-start items-center bg-fotofuchsia p-2 rounded-sm mt-10 mb-4 sm:w-full sm:text-center lg:w-1/2 xl:w-1/3">
                    <span class=" text-white ml-2">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
                        </svg>
                    </span>
                    <span class="text-gray-50 text-md ml-3">Add to Basket</span>
                </div>
                <div class="text-base mb-4">@product.Description</div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    public Error Error { get; set; }

    private ProductDTO product;

    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await GetProductById();
    }

    private async Task GetProductById()
    {
        try
        {
            product = await productService.GetProductByIdAsync(Id);
            errorMessage = "";
        }
        catch (Exception ex)
        {
            Error.ProcessError(ex, "Pages/Products/Details.GetProductById()");
            errorMessage = "Could not retrieve details for this product";
        }
    }
}
