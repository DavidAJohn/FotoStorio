@using FotoStorio.Shared.Entities
@using Blazored.LocalStorage

@inject ILocalStorageService localStorage

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public Basket Basket { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await GetBasketAsync();
    }

    public async Task GetBasketAsync()
    {
        // Retrieve the Basket from the browser's local storage
        Basket = await localStorage.GetItemAsync<Basket>("FotoStorio_Basket");

        // If the Basket is not there or empty...
        if (Basket == null || Basket.BasketItems.Count == 0)
        {
            // Create a new Basket
            Basket = new Basket();
        }
        else
        {
            // otherwise, check to see if the Basket has expired
            if (DateTime.Now > Basket.LastAccessed.AddSeconds(Basket.TimeToLiveInSeconds))          
            {
                // Expired. Create a new Basket.
                Basket = new Basket();
            }
        }

        Basket.LastAccessed = DateTime.Now;
    }

    public async Task SaveChangesAsync() 
    {
        // Set the time stamp to current time and save to local storage
        Basket.LastAccessed = DateTime.Now;
        await localStorage.SetItemAsync("FotoStorio_Basket", Basket);
    }

    private int basketItemCount = 0;
    public int BasketItemCount
    {
        get
        {
            return basketItemCount;
        }
        set
        {
            basketItemCount = value;
            StateHasChanged();
        }
    }
}
